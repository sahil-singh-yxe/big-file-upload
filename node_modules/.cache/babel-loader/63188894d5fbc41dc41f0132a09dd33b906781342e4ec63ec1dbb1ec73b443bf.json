{"ast":null,"code":"import { dateISOString, xAmzDate, dateYMD } from \"./Date\";\nexport default class Policy {\n  static getPolicy(config) {\n    const policy = () => {\n      return {\n        expiration: dateISOString,\n        conditions: [{\n          bucket: config.bucketName\n        }, [\"starts-with\", \"$key\", `${config.dirName ? config.dirName + \"/\" : \"\"}`], {\n          acl: \"public-read\"\n        }, [\"starts-with\", \"$Content-Type\", \"\"], {\n          \"x-amz-meta-uuid\": \"14365123651274\"\n        }, {\n          \"x-amz-server-side-encryption\": \"AES256\"\n        }, [\"starts-with\", \"$x-amz-meta-tag\", \"\"], {\n          \"x-amz-credential\": `${config.accessKeyId}/${dateYMD}/${config.region}/s3/aws4_request`\n        }, {\n          \"x-amz-algorithm\": \"AWS4-HMAC-SHA256\"\n        }, {\n          \"x-amz-date\": xAmzDate\n        }]\n      };\n    };\n    //Returns a base64 policy;\n    return new Buffer(JSON.stringify(policy())).toString(\"base64\").replace(/\\n|\\r/, \"\");\n  }\n}\n;","map":{"version":3,"names":["dateISOString","xAmzDate","dateYMD","Policy","getPolicy","config","policy","expiration","conditions","bucket","bucketName","dirName","acl","accessKeyId","region","Buffer","JSON","stringify","toString","replace"],"sources":["/Users/sahilsingh/Desktop/projects/proj-s3/node_modules/react-s3/lib/Policy.js"],"sourcesContent":["import { dateISOString, xAmzDate, dateYMD } from \"./Date\";\n\nexport default class Policy {\n    static getPolicy(config) {\n        const policy = () => {\n            return {\n                expiration: dateISOString,\n                conditions: [{ bucket: config.bucketName }, [\"starts-with\", \"$key\", `${config.dirName ? config.dirName + \"/\" : \"\"}`], { acl: \"public-read\" }, [\"starts-with\", \"$Content-Type\", \"\"], { \"x-amz-meta-uuid\": \"14365123651274\" }, { \"x-amz-server-side-encryption\": \"AES256\" }, [\"starts-with\", \"$x-amz-meta-tag\", \"\"], {\n                    \"x-amz-credential\": `${config.accessKeyId}/${dateYMD}/${config.region}/s3/aws4_request`\n                }, { \"x-amz-algorithm\": \"AWS4-HMAC-SHA256\" }, { \"x-amz-date\": xAmzDate }]\n            };\n        };\n        //Returns a base64 policy;\n        return new Buffer(JSON.stringify(policy())).toString(\"base64\").replace(/\\n|\\r/, \"\");\n    }\n};"],"mappings":"AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,QAAQ;AAEzD,eAAe,MAAMC,MAAM,CAAC;EACxB,OAAOC,SAASA,CAACC,MAAM,EAAE;IACrB,MAAMC,MAAM,GAAGA,CAAA,KAAM;MACjB,OAAO;QACHC,UAAU,EAAEP,aAAa;QACzBQ,UAAU,EAAE,CAAC;UAAEC,MAAM,EAAEJ,MAAM,CAACK;QAAW,CAAC,EAAE,CAAC,aAAa,EAAE,MAAM,EAAG,GAAEL,MAAM,CAACM,OAAO,GAAGN,MAAM,CAACM,OAAO,GAAG,GAAG,GAAG,EAAG,EAAC,CAAC,EAAE;UAAEC,GAAG,EAAE;QAAc,CAAC,EAAE,CAAC,aAAa,EAAE,eAAe,EAAE,EAAE,CAAC,EAAE;UAAE,iBAAiB,EAAE;QAAiB,CAAC,EAAE;UAAE,8BAA8B,EAAE;QAAS,CAAC,EAAE,CAAC,aAAa,EAAE,iBAAiB,EAAE,EAAE,CAAC,EAAE;UAC/S,kBAAkB,EAAG,GAAEP,MAAM,CAACQ,WAAY,IAAGX,OAAQ,IAAGG,MAAM,CAACS,MAAO;QAC1E,CAAC,EAAE;UAAE,iBAAiB,EAAE;QAAmB,CAAC,EAAE;UAAE,YAAY,EAAEb;QAAS,CAAC;MAC5E,CAAC;IACL,CAAC;IACD;IACA,OAAO,IAAIc,MAAM,CAACC,IAAI,CAACC,SAAS,CAACX,MAAM,EAAE,CAAC,CAAC,CAACY,QAAQ,CAAC,QAAQ,CAAC,CAACC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;EACvF;AACJ;AAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}